// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: copy.proto

package copy

import (
	context "context"
	fmt "fmt"
	math "math"
	reflect "reflect"

	proto "github.com/gogo/protobuf/proto"
	"github.com/tvducmt/protoc-gen-copy/protobuf-file/core-service"
	core_service "github.com/tvducmt/protoc-gen-copy/protobuf-file/core-service"
	middleware "github.com/tvducmt/protoc-gen-copy/protobuf-file/middleware"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context

func isNil(field interface{}) bool {
	zero := reflect.Zero(reflect.TypeOf(field)).Interface()
	if reflect.DeepEqual(field, zero) {
		return true
	}
	return false
}

type copy struct {
}

func NewCopy() *copy {
	return &copy{}
}

func (c *copy) ListCITransactionsRequest(from *middleware.BODetailReconciliation, to *core_service.BODetailReconciliation) error {
	if !isNil(from.CountableAttribute) {
		to.CountableAttribute = &core.BODetailReconciliation_CountableAttribute{
			TpeBankCode: func(h *middleware.BODetailReconciliation_CountableAttribute) string {
				if h == nil {
					return reflect.Zero(reflect.TypeOf(reflect.String)).Interface().(string)
				}
				return h.TpeBankCode
			}(from.CountableAttribute),
			Hello: &core.Hello{
				H1: func(h *middleware.Hello) string {
					if h == nil {
						return reflect.Zero(reflect.TypeOf(reflect.String)).Interface().(string)
					}
					return h.H1
				}(from.CountableAttribute.Hello),
				H2: func(h *middleware.Hello) string {
					if h == nil {
						return reflect.Zero(reflect.TypeOf(reflect.String)).Interface().(string)
					}
					return h.H2
				}(from.CountableAttribute.Hello),
			},
			ItemCount: func(h *middleware.BODetailReconciliation_CountableAttribute) int32 {
				if h == nil {
					return reflect.Zero(reflect.TypeOf(reflect.Int32)).Interface().(int32)
				}
				return h.ItemCount
			}(from.CountableAttribute),
		}
	}
	return nil
}
