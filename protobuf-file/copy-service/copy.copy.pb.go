// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: copy.proto

package copy

import (
	context "context"
	fmt "fmt"
	math "math"
	"reflect"

	proto "github.com/gogo/protobuf/proto"
	"github.com/golang/protobuf/ptypes/timestamp"
	core_service "github.com/tvducmt/protoc-gen-copy/protobuf-file/core-service"
	middleware "github.com/tvducmt/protoc-gen-copy/protobuf-file/middleware"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context

func CheckNull(field interface{}) bool {
	zero := reflect.Zero(reflect.TypeOf(field)).Interface()
	if reflect.DeepEqual(field, zero) {
		return true
	}
	return false
}

type copy struct {
}

func NewCopy() *copy {
	return &copy{}
}

func (c *copy) ListCITransactionsRequest(from *middleware.BODetailReconciliation, to *core_service.BODetailReconciliation) error {
	if !CheckNull(from.FromDate) {
		to.FromDate = &proto.Date{
			Year: func(h *proto.Date) int32 {
				if h == nil {
					return reflect.Zero(reflect.TypeOf(reflect.Int32)).Interface().(int32)
				}
				return h.Year
			}(from.FromDate),
			Month: func(h *proto.Date) int32 {
				if h == nil {
					return reflect.Zero(reflect.TypeOf(reflect.Int32)).Interface().(int32)
				}
				return h.Month
			}(from.FromDate),
			Day: func(h *proto.Date) int32 {
				if h == nil {
					return reflect.Zero(reflect.TypeOf(reflect.Int32)).Interface().(int32)
				}
				return h.Day
			}(from.FromDate),
		}
	}
	if !CheckNull(from.TransTime) {
		to.TransTime = &timestamp.Timestamp{
			Seconds: func(h *timestamp.Timestamp) int64 {
				if h == nil {
					return reflect.Zero(reflect.TypeOf(reflect.Int64)).Interface().(int64)
				}
				return h.Seconds
			}(from.TransTime),
			Nanos: func(h *timestamp.Timestamp) int32 {
				if h == nil {
					return reflect.Zero(reflect.TypeOf(reflect.Int32)).Interface().(int32)
				}
				return h.Nanos
			}(from.TransTime),
		}
	}
	return nil
}
